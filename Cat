```python
import os
import cv2
import numpy as np
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# Set the path to your dataset
dataset_path = "path/to/your/dataset"

# Load and preprocess the dataset
def load_dataset():
    images = []
    labels = []
    for filename in os.listdir(dataset_path):
        if filename.endswith(".jpg"):
            img = cv2.imread(os.path.join(dataset_path, filename))
            img = cv2.resize(img, (64, 64))
            images.append(img)
            label = filename.split(".")[0]
            if label == "dog":
                labels.append(1)
            elif label == "cat":
                labels.append(0)
    images = np.array(images)
    labels = np.array(labels)
    return images, labels

# Split the dataset into training and testing sets
def split_dataset(images, labels):
    X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, random_state=42)
    return X_train, X_test, y_train, y_test

# Build the CNN model
def build_model():
    model = Sequential()
    model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Conv2D(64, (3, 3), activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Flatten())
    model.add(Dense(128, activation='relu'))
    model.add(Dense(1, activation='sigmoid'))
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

# Load and preprocess the dataset
images, labels = load_dataset()

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = split_dataset(images, labels)

# Build the CNN model
model = build_model()

# Train the model
model.fit(X_train, y_train, batch_size=32, epochs
